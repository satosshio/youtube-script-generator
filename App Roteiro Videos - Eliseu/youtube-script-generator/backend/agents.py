from typing import Dict, List, TypedDict, Annotated, Sequence
from langgraph.graph import StateGraph, END
from langchain_openai import ChatOpenAI
from langchain_anthropic import ChatAnthropic
from langchain.schema import HumanMessage, BaseMessage
import operator
import os
from dotenv import load_dotenv
from script_utils import ScriptUtils

load_dotenv()

class ScriptState(TypedDict):
    videos: List[Dict]
    topic: str
    target_minutes: int
    personality_prompt: str
    model_provider: str
    trends: List[str]
    script_structure: Dict
    raw_script: str
    final_script: str
    messages: Annotated[Sequence[BaseMessage], operator.add]

class MultiAgentSystem:
    def __init__(self, model_provider: str = "openai"):
        self.model_provider = model_provider
        
        if model_provider == "anthropic":
            anthropic_api_key = os.getenv("ANTHROPIC_API_KEY")
            print(f"DEBUG: Anthropic API Key encontrada: {'Sim' if anthropic_api_key else 'N√£o'}")
            if anthropic_api_key:
                print(f"DEBUG: Claude Key come√ßa com: {anthropic_api_key[:7]}...")
            if not anthropic_api_key:
                print("Warning: Anthropic API key not found. Using OpenAI as fallback.")
                model_provider = "openai"
            else:
                self.llm = ChatAnthropic(
                    model="claude-3-5-sonnet-20241022",
                    temperature=0.7,
                    api_key=anthropic_api_key,
                    max_tokens=4096
                )
                print("DEBUG: Using Claude 3.5 Sonnet")
        
        if model_provider == "openai":
            openai_api_key = os.getenv("OPENAI_API_KEY")
            print(f"DEBUG: OpenAI API Key encontrada: {'Sim' if openai_api_key else 'N√£o'}")
            if openai_api_key:
                print(f"DEBUG: OpenAI Key come√ßa com: {openai_api_key[:7]}...")
            if not openai_api_key:
                print("Warning: OpenAI API key not found. AI functionality will be limited.")
                self.llm = None
            else:
                self.llm = ChatOpenAI(
                    model="gpt-4o",
                    temperature=0.7,
                    api_key=openai_api_key
                )
                print("DEBUG: Using GPT-4o")
        self.graph = self._build_graph()
        self.progress_callback = None
        self.agent_info = {
            "pesquisador": {"name": "üîç Pesquisador", "description": "Analisando v√≠deos em alta..."},
            "analista": {"name": "üìä Analista", "description": "Identificando tend√™ncias virais..."},
            "roteirista": {"name": "‚úçÔ∏è Roteirista", "description": "Criando estrutura do roteiro..."},
            "eliseu": {"name": "üéôÔ∏è Eliseu", "description": "Aplicando estilo e personalidade..."},
            "revisor": {"name": "‚úÖ Revisor", "description": "Finalizando e ajustando tempo..."}
        }
    
    def _build_graph(self):
        workflow = StateGraph(ScriptState)
        
        workflow.add_node("pesquisador", self.pesquisador_agent)
        workflow.add_node("analista", self.analista_agent)
        workflow.add_node("roteirista", self.roteirista_agent)
        workflow.add_node("eliseu", self.eliseu_agent)
        workflow.add_node("revisor", self.revisor_agent)
        
        workflow.set_entry_point("pesquisador")
        workflow.add_edge("pesquisador", "analista")
        workflow.add_edge("analista", "roteirista")
        workflow.add_edge("roteirista", "eliseu")
        workflow.add_edge("eliseu", "revisor")
        workflow.add_edge("revisor", END)
        
        return workflow.compile()
    
    async def _notify_progress(self, agent_name: str, step: int, total_steps: int = 5):
        """Notifica o progresso para o callback se dispon√≠vel"""
        if self.progress_callback:
            agent_data = self.agent_info.get(agent_name, {})
            await self.progress_callback({
                "step": step,
                "total": total_steps,
                "agent": agent_data.get("name", agent_name),
                "description": agent_data.get("description", "Processando..."),
                "percentage": int((step / total_steps) * 100)
            })
    
    def pesquisador_agent(self, state: ScriptState) -> ScriptState:
        """Agente que organiza e analisa os dados dos v√≠deos"""
        # Notifica progresso se poss√≠vel
        if self.progress_callback:
            import asyncio
            loop = asyncio.new_event_loop()
            loop.run_until_complete(self._notify_progress("pesquisador", 1))
            loop.close()
        
        videos = state["videos"]
        topic = state["topic"]
        
        # Verifica se h√° transcri√ß√µes dispon√≠veis
        videos_with_transcripts = [v for v in videos if v.get('has_transcript', False)]
        
        transcript_analysis = ""
        if videos_with_transcripts:
            transcript_analysis = "\n\nAN√ÅLISE DETALHADA DAS TRANSCRI√á√ïES DOS V√çDEOS MAIS HYPADOS:\n"
            for i, video in enumerate(videos_with_transcripts[:3], 1):
                transcript_analysis += f"""
                
                V√çDEO {i}: {video['title']}
                Engagement: {video.get('engagement_score', 0):.2f}% | Views: {video['views']:,}
                
                CONTE√öDO REAL DO V√çDEO:
                {video.get('transcript_summary', '')}
                
                ---"""
        
        prompt = f"""
        Voc√™ √© um agente pesquisador especializado em YouTube com acesso √†s TRANSCRI√á√ïES REAIS dos v√≠deos hypados.
        Analise os seguintes v√≠deos sobre "{topic}" e organize as informa√ß√µes mais relevantes:
        
        METADADOS DOS V√çDEOS:
        {self._format_videos(videos)}
        
        {transcript_analysis}
        
        Com base nas TRANSCRI√á√ïES REAIS dos v√≠deos hypados, extraia:
        1. Principais temas e abordagens que realmente funcionam (baseado no conte√∫do real)
        2. Estruturas de apresenta√ß√£o e ganchos usados nos v√≠deos de sucesso
        3. Linguagem e tom que geram engagement
        4. Elementos espec√≠ficos que prendem a aten√ß√£o (baseado nas transcri√ß√µes)
        5. Padr√µes de conte√∫do que viralizam
        6. Gaps de conte√∫do (o que falta ser abordado)
        
        IMPORTANTE: Priorize insights das transcri√ß√µes reais em vez de apenas metadados.
        Seja espec√≠fico e detalhado com base no conte√∫do real dos v√≠deos.
        """
        
        response = self.llm.invoke([HumanMessage(content=prompt)])
        state["messages"].append(response)
        return state
    
    def analista_agent(self, state: ScriptState) -> ScriptState:
        """Agente que identifica tend√™ncias e sugere t√≥picos-chave baseado em transcri√ß√µes reais"""
        last_message = state["messages"][-1].content if state["messages"] else ""
        videos = state["videos"]
        
        # Conta quantos v√≠deos t√™m transcri√ß√µes
        videos_with_transcripts = [v for v in videos if v.get('has_transcript', False)]
        transcript_count = len(videos_with_transcripts)
        
        transcript_context = ""
        if transcript_count > 0:
            transcript_context = f"""
            
            VANTAGEM COMPETITIVA: Temos acesso √†s TRANSCRI√á√ïES REAIS de {transcript_count} v√≠deos hypados!
            Isso nos permite identificar padr√µes exatos de linguagem, estrutura e conte√∫do que geram viral.
            """
        
        prompt = f"""
        Voc√™ √© um analista de tend√™ncias de conte√∫do com acesso privilegiado √†s transcri√ß√µes dos v√≠deos mais hypados.
        
        AN√ÅLISE DETALHADA ANTERIOR (baseada em conte√∫do real):
        {last_message}
        
        {transcript_context}
        
        Com base nas TRANSCRI√á√ïES REAIS dos v√≠deos hypados, identifique:
        1. As 5 principais tend√™ncias de conte√∫do que realmente funcionam (n√£o suposi√ß√µes)
        2. Padr√µes de linguagem e frases que geram engagement
        3. Estruturas de apresenta√ß√£o comprovadamente eficazes
        4. Elementos espec√≠ficos de abertura/gancho que prendem aten√ß√£o
        5. T√≥picos-chave que devem ser abordados no roteiro
        6. Timing e ritmo de apresenta√ß√£o dos v√≠deos de sucesso
        7. Calls-to-action que realmente convertem
        
        IMPORTANTE: Base suas recomenda√ß√µes no CONTE√öDO REAL dos v√≠deos hypados, n√£o em teorias.
        Forne√ßa insights espec√≠ficos e acion√°veis para replicar o sucesso viral.
        """
        
        response = self.llm.invoke([HumanMessage(content=prompt)])
        
        trends_prompt = f"""
        Extraia apenas uma lista com os 5 principais t√≥picos/tend√™ncias mencionados.
        
        Texto: {response.content}
        
        Retorne apenas a lista, um item por linha.
        """
        
        trends_response = self.llm.invoke([HumanMessage(content=trends_prompt)])
        state["trends"] = trends_response.content.split('\n')
        state["messages"].append(response)
        return state
    
    def roteirista_agent(self, state: ScriptState) -> ScriptState:
        """Agente que cria a estrutura do roteiro"""
        last_message = state["messages"][-1].content if state["messages"] else ""
        trends = state.get("trends", [])
        topic = state["topic"]
        target_minutes = state["target_minutes"]
        personality_prompt = state["personality_prompt"]
        
        # Calculate target word count (velocidade normal: 155 palavras/minuto)
        target_words = target_minutes * 155
        min_words = target_words - 50  # Margem m√≠nima
        max_words = target_words + 50  # Margem m√°xima
        
        personality_section = ""
        if personality_prompt:
            personality_section = f"""
        
        ESTILO E PERSONALIDADE ESPEC√çFICA:
        {personality_prompt}
        """
        
        # Ajusta estrutura baseada na dura√ß√£o
        if target_minutes <= 5:
            desenvolvimento_time = f"{target_minutes - 2} minutos"
            pontos_principais = "2-3 pontos principais"
        elif target_minutes <= 10:
            desenvolvimento_time = f"{target_minutes - 3} minutos"
            pontos_principais = "3-5 pontos principais"
        elif target_minutes <= 20:
            desenvolvimento_time = f"{target_minutes - 5} minutos"
            pontos_principais = "5-7 pontos principais com mais profundidade"
        else:
            desenvolvimento_time = f"{target_minutes - 8} minutos"
            pontos_principais = "7-10 pontos principais com exemplos detalhados"
        
        # Verifica se temos transcri√ß√µes para usar como refer√™ncia
        videos = state["videos"]
        videos_with_transcripts = [v for v in videos if v.get('has_transcript', False)]
        
        transcript_reference = ""
        if videos_with_transcripts:
            transcript_reference = "\n\nREFER√äNCIAS DE ESTRUTURA DOS V√çDEOS HYPADOS:\n"
            for i, video in enumerate(videos_with_transcripts[:2], 1):
                transcript_reference += f"""
                
                REFER√äNCIA {i} - {video['title']} ({video.get('engagement_score', 0):.1f}% engagement):
                Estrutura real usada no v√≠deo:
                {video.get('transcript_summary', '')[:800]}
                ---"""
        
        prompt = f"""
        Voc√™ √© um roteirista profissional de YouTube com acesso √†s TRANSCRI√á√ïES dos v√≠deos mais hypados do nicho.
        
        Crie um roteiro completo sobre "{topic}" considerando:
        
        DURA√á√ÉO ALVO: {target_minutes} minutos (~{target_words} palavras)
        
        AN√ÅLISE BASEADA EM CONTE√öDO REAL:
        {last_message}
        
        Tend√™ncias identificadas nas transcri√ß√µes:
        {', '.join(trends)}{personality_section}
        
        {transcript_reference}
        
        Estrutura obrigat√≥ria (adaptada para {target_minutes} minutos):
        
        1. GANCHO (primeiros 5-10 segundos)
        - Pergunta impactante ou afirma√ß√£o pol√™mica
        - Promessa clara do que o viewer vai aprender
        
        2. INTRODU√á√ÉO (15-30 segundos)
        - Contextualiza√ß√£o r√°pida
        - Por que isso √© importante AGORA
        
        3. DESENVOLVIMENTO ({desenvolvimento_time})
        - {pontos_principais}
        - Exemplos pr√°ticos
        - Dados ou estat√≠sticas relevantes
        - Storytelling se poss√≠vel
        
        4. CL√çMAX (30-60 segundos)
        - Revela√ß√£o principal ou insight mais valioso
        - Momento "aha"
        
        5. CONCLUS√ÉO (20-40 segundos)
        - Recapitula√ß√£o r√°pida
        - Aplica√ß√£o pr√°tica
        
        6. CTA (10-15 segundos)
        - A√ß√£o espec√≠fica para o viewer
        - Pedido de like/inscri√ß√£o contextualizado
        
        üö® REQUISITO CR√çTICO DE DURA√á√ÉO:
        ‚ö†Ô∏è O roteiro DEVE ter entre {min_words} e {max_words} palavras FALADAS
        üéØ ALVO IDEAL: {target_words} palavras para {target_minutes} minutos
        
        REGRAS R√çGIDAS DE CONTAGEM:
        - Conte APENAS o que o apresentador vai FALAR
        - N√ÉO conte [indica√ß√µes entre colchetes]
        - N√ÉO conte (instru√ß√µes entre par√™nteses)
        - N√ÉO conte t√≠tulos de se√ß√µes ou estrutura
        - APENAS texto corrido que ser√° dito em voz alta
        
        ‚úÖ FORMATO DE ROTEIRO PROFISSIONAL:
        
        [GANCHO - 10 segundos]
        Eliseu üë§: Aqui come√ßa o que eu vou realmente falar para a c√¢mera.
        
        [TRANSI√á√ÉO PARA INTRODU√á√ÉO]
        Eliseu üë§: Continuo falando aqui...
        
        [INDICA√á√ÉO VISUAL - mostrar gr√°fico]
        Eliseu üë§: E como voc√™s podem ver neste exemplo...
        
        üî• ESTRAT√âGIAS PARA ATINGIR {target_words} PALAVRAS:
        - Desenvolva CADA ponto em profundidade
        - Adicione exemplos pr√°ticos e concretos
        - Use hist√≥rias curtas e casos reais
        - Inclua dados, estat√≠sticas e n√∫meros
        - Fa√ßa transi√ß√µes elaboradas entre t√≥picos
        - Explique o "porqu√™" por tr√°s de cada informa√ß√£o
        - Adicione contexto hist√≥rico quando relevante
        - Use analogias e compara√ß√µes
        
        DIRETRIZES DE CONTE√öDO:
        - BASEIE-SE nas estruturas dos v√≠deos hypados acima
        - Use GANCHOS das transcri√ß√µes reais
        - Mantenha o estilo solicitado{': ' + personality_prompt if personality_prompt else ''}
        - NUNCA seja superficial - desenvolva completamente cada ideia
        
        üéØ META FINAL: Escreva um roteiro com PELO MENOS {min_words} palavras de FALA (ideal: {target_words}) para garantir {target_minutes} minutos completos de v√≠deo.
        
        üö® PROIBI√á√ïES ABSOLUTAS:
        ‚ùå N√ÉO escreva explica√ß√µes sobre o roteiro ("Este roteiro possui...", "A estrutura inclui...", "Agora voc√™ tem...")
        ‚ùå N√ÉO fa√ßa coment√°rios meta sobre o conte√∫do criado
        ‚ùå N√ÉO inclua resumos ou descri√ß√µes da estrutura
        ‚ùå N√ÉO adicione coment√°rios finais ("Esse roteiro agora tem...", "Espero que atenda...")
        ‚ùå N√ÉO use formata√ß√£o markdown (**negrito**, *it√°lico*, # t√≠tulos)
        ‚úÖ TERMINE com a √∫ltima fala do Eliseu, SEM coment√°rios adicionais
        ‚úÖ APENAS o roteiro puro no formato profissional solicitado
        """
        
        response = self.llm.invoke([HumanMessage(content=prompt)])
        state["raw_script"] = response.content
        state["messages"].append(response)
        return state
    
    def eliseu_agent(self, state: ScriptState) -> ScriptState:
        """Agente que reescreve no estilo personalizado ou do Eliseu"""
        raw_script = state.get("raw_script", "")
        personality_prompt = state.get("personality_prompt", "")
        target_minutes = state.get("target_minutes", 10)
        target_words = target_minutes * 155  # Velocidade normal: 155 wpm
        min_words = target_words - 50  # Margem m√≠nima
        max_words = target_words + 50  # Margem m√°xima
        
        if personality_prompt:
            # Use custom personality
            prompt = f"""
        Voc√™ √© um criador de conte√∫do que deve seguir exatamente este estilo:
        
        {personality_prompt}
        
        Reescreva este roteiro seguindo EXATAMENTE o estilo e personalidade solicitados:
        """
        else:
            # Use Eliseu's default style
            prompt = f"""
        Voc√™ √© o Eliseu, um criador de conte√∫do carism√°tico e aut√™ntico.
        
        Reescreva este roteiro no seu estilo √∫nico:
        """
        
        prompt += f"""
        
        ROTEIRO ORIGINAL:
        {raw_script}
        
        üö® META CR√çTICA DE DURA√á√ÉO: {target_minutes} minutos
        üéØ PALAVRAS NECESS√ÅRIAS: {min_words} - {max_words} (ideal: {target_words})
        
        ‚ö†Ô∏è IMPORTANTE: O roteiro atual pode estar muito CURTO. 
        Voc√™ DEVE expandir o conte√∫do para atingir pelo menos {min_words} palavras FALADAS.
        
        üìã FORMATO OBRIGAT√ìRIO DE SA√çDA - SIGA EXATAMENTE:
        
        üö® EXEMPLO DO FORMATO CORRETO:
        
        [GANCHO - 10 segundos]
        Eliseu üë§: Fala, galera! Voc√™ sabia que...
        
        [INTRODU√á√ÉO - por que √© importante]
        Eliseu üë§: Isso mesmo, √© impressionante! Mas e se eu te disser...
        
        [DESENVOLVIMENTO - ponto principal]
        Eliseu üë§: Primeiro, vamos entender que...
        
        [INDICA√á√ÉO VISUAL - mostrar dados na tela]
        Eliseu üë§: Como voc√™s podem ver neste gr√°fico...
        
        üö® REGRAS R√çGIDAS:
        ‚ùå N√ÉO escreva texto corrido sem formata√ß√£o
        ‚ùå N√ÉO omita "Eliseu üë§:" antes de cada fala
        ‚ùå N√ÉO omita as se√ß√µes [ENTRE COLCHETES]
        ‚úÖ SEMPRE quebre em blocos organizados
        ‚úÖ SEMPRE use "Eliseu üë§:" para cada fala
        ‚úÖ SEMPRE marque se√ß√µes com [NOME DA SE√á√ÉO]
        """
        
        if not personality_prompt:
            prompt += """
        
        SEU ESTILO DE FALA AUT√äNTICO (Eliseu Manica Jr.):
        
        TOM DID√ÅTICO E ACESS√çVEL:
        - Explique conceitos de forma simplificada e clara
        - Antecipe d√∫vidas do espectador ("eu sei que voc√™ pode estar pensando...")
        - Use exemplos concretos com n√∫meros para facilitar
        - Mantenha credibilidade t√©cnica mesmo sendo informal
        
        LINGUAGEM COLOQUIAL CARACTER√çSTICA:
        - Use "t√°" ao inv√©s de "est√°"
        - Use "pra" ao inv√©s de "para"
        - Use "pro" ao inv√©s de "para o"
        - Express√µes t√≠picas: "de jeito nenhum", "isso a√≠", "√≥" (ao inv√©s de "olha")
        - Alongue palavras para manter ritmo
        
        V√çCIOS DE LINGUAGEM AUT√äNTICOS (USE COM MODERA√á√ÉO):
        - Adicione "n√©" ocasionalmente no final das frases ("isso √© importante n√©", "voc√™ vai investir n√©")
        - Use "ou seja" para reformular ideias
        - Marcadores discursivos: "al√©m disso", "dessa forma", "por√©m", "mas"
        - Estrutura repetitiva: "como funciona [isso]" para introduzir t√≥picos
        
        ESTILO YOUTUBER:
        - Perguntas ret√≥ricas para manter aten√ß√£o
        - Ganchos no in√≠cio ("√â disso que eu vou falar nesse v√≠deo")
        - Pedidos diretos mas naturais ("se inscreve no canal", "deixa o seu like")
        - Humor sutil ("como o pr√≥prio nome diz... √≥ quem diria")
        
        INFORMALIDADES NATURAIS:
        - Fragmenta√ß√£o de frases longas com m√∫ltiplas conex√µes
        - Concord√¢ncias informais ocasionais
        - Tom de conversa com um amigo
        
        üö® REQUISITOS CR√çTICOS:
        - Mantenha TODA a estrutura e informa√ß√µes
        - EXPANDA o conte√∫do para ter pelo menos {min_words} palavras FALADAS
        - Use os v√≠cios de linguagem com MODERA√á√ÉO (especialmente o "n√©")
        - Seja natural e fluido, n√£o for√ßado
        - Mantenha o equil√≠brio entre informal e educativo
        - DESENVOLVA cada ponto completamente - N√ÉO seja superficial
        - Adicione exemplos, contexto e detalhes para atingir a dura√ß√£o alvo
        
        üö® INSTRU√á√ïES FINAIS OBRIGAT√ìRIAS:
        
        1. REESCREVA TODO O ROTEIRO no formato especificado acima
        2. QUEBRE o texto em se√ß√µes organizadas com [T√çTULOS]
        3. TODA fala DEVE come√ßar com "Eliseu üë§:"
        4. ADICIONE indica√ß√µes t√©cnicas [entre colchetes] quando necess√°rio
        5. MANTENHA o conte√∫do original mas organize no formato correto
        
        üö® PROIBI√á√ïES ABSOLUTAS:
        ‚ùå PROIBIDO texto corrido sem "Eliseu üë§:"
        ‚ùå PROIBIDO omitir se√ß√µes [ENTRE COLCHETES]
        ‚ùå PROIBIDO explica√ß√µes sobre o roteiro
        ‚ùå PROIBIDO coment√°rios finais ou resumos
        ‚ùå PROIBIDO formata√ß√£o markdown
        
        ‚úÖ COMECE imediatamente com: [GANCHO - 10 segundos]
        ‚úÖ TERMINE com a √∫ltima fala: "Eliseu üë§: [√∫ltima fala]"
        ‚úÖ SEM coment√°rios adicionais ap√≥s a √∫ltima fala
        """
        
        response = self.llm.invoke([HumanMessage(content=prompt)])
        state["messages"].append(response)
        return state
    
    def revisor_agent(self, state: ScriptState) -> ScriptState:
        """Agente que faz a revis√£o final e ajusta o tempo precisamente com valida√ß√£o rigorosa"""
        last_message = state["messages"][-1].content if state["messages"] else ""
        target_minutes = state.get("target_minutes", 10)
        personality_prompt = state.get("personality_prompt", "")
        
        # Analisa o roteiro atual para contar palavras FALADAS
        script_utils = ScriptUtils()
        spoken_text, word_count = script_utils.extract_spoken_words(last_message)
        actual_duration = script_utils.calculate_duration(word_count)
        
        target_words = target_minutes * 155  # Velocidade normal: 155 wpm
        min_words = target_words - 50  # Margem m√≠nima
        max_words = target_words + 50  # Margem m√°xima
        
        # Determina a a√ß√£o necess√°ria
        if word_count < min_words:
            action_needed = f"üö® ROTEIRO MUITO CURTO! Adicione {min_words - word_count} palavras FALADAS m√≠nimo"
            expansion_strategy = f"""
        
        üî• ESTRAT√âGIAS OBRIGAT√ìRIAS PARA EXPANDIR:
        - Desenvolva cada ponto em MUITO mais profundidade
        - Adicione 2-3 exemplos pr√°ticos para cada conceito principal
        - Inclua hist√≥rias pessoais, casos reais e contexto hist√≥rico
        - Adicione dados, estat√≠sticas e compara√ß√µes
        - Elabore transi√ß√µes mais longas e detalhadas entre se√ß√µes
        - Explique o "como" e "por que" de cada afirma√ß√£o
        - Use analogias e met√°foras elaboradas
        - Adicione sub-t√≥picos e desdobramentos
        - Inclua antecipa√ß√£o de d√∫vidas e obje√ß√µes
        - Desenvolva mais o CTA e conclus√£o
        
        ‚ö†Ô∏è VOC√ä DEVE REESCREVER O ROTEIRO COMPLETAMENTE para ter pelo menos {min_words} palavras FALADAS!
            """
        elif word_count > max_words:
            action_needed = f"‚úÇÔ∏è ROTEIRO MUITO LONGO! Remova {word_count - max_words} palavras FALADAS"
            expansion_strategy = """
        
        üìè ESTRAT√âGIAS PARA REDUZIR:
        - Remova exemplos menos importantes
        - Seja mais direto nas explica√ß√µes
        - Elimine repeti√ß√µes e redundancias
        - Foque apenas nos pontos essenciais
            """
        else:
            action_needed = "‚úÖ Tempo est√° na margem aceit√°vel - fazer apenas ajustes finos"
            expansion_strategy = ""
        
        estilo_info = "estilo personalizado" if personality_prompt else "tom Eliseu"
        
        # Recalcula as dura√ß√µes ap√≥s an√°lise atual
        all_durations = script_utils.calculate_all_durations(word_count)
        
        prompt = f"""
        üö® REVISOR FINAL - AJUSTE OBRIGAT√ìRIO DE DURA√á√ÉO üö®
        
        üìà AN√ÅLISE ATUAL DO ROTEIRO:
        - Palavras FALADAS (sem indica√ß√µes): {word_count} palavras
        - Dura√ß√£o atual: {actual_duration:.1f} minutos  
        - META OBRIGAT√ìRIA: {target_minutes} minutos ({target_words} palavras)
        - FAIXA ACEIT√ÅVEL: {min_words} - {max_words} palavras
        
        üö® A√á√ÉO NECESS√ÅRIA: {action_needed}{expansion_strategy}
        
        ROTEIRO ATUAL PARA REVIS√ÉO:
        {last_message}
        
        üìã INSTRU√á√ïES R√çGIDAS:
        
        1. üéØ AJUSTE DE TEMPO OBRIGAT√ìRIO:
           - O roteiro final DEVE ter entre {min_words} e {max_words} palavras FALADAS
           - Conte APENAS o que ser√° dito em voz alta
           - N√ÉO conte [indica√ß√µes] ou (instru√ß√µes) ou t√≠tulos de se√ß√£o
           - Se estiver abaixo de {min_words} palavras, REESCREVA expandindo dramaticamente
        
        2. üé® ESTRUTURA FINAL:
           - Separe claramente FALAS de INDICA√á√ïES
           - Use [colchetes] para a√ß√µes/visuais que N√ÉO s√£o faladas
           - Todo texto corrido = fala que conta para o tempo
        
        3. ‚ú® QUALIDADE:
           - Gancho ultra impactante nos primeiros 10 segundos
           - Fluidez e {estilo_info} consistente
           - CTAs naturais e persuasivos
           - Ritmo envolvente do come√ßo ao fim
        
        üìÅ FORMATO OBRIGAT√ìRIO DO OUTPUT:
        üìÖ TEMPO ESTIMADO DE LEITURA:
        üêå Lenta (130 wpm): {all_durations['lenta']['formatted']}
        üéØ Normal (155 wpm): {all_durations['normal']['formatted']} 
        üöÄ R√°pida (184 wpm): {all_durations['rapida']['formatted']}
        
        üìà Palavras faladas: {word_count}
        
        üé¨ FORMATO OBRIGAT√ìRIO - ROTEIRO PROFISSIONAL:
        
        üö® ATEN√á√ÉO: Voc√™ DEVE seguir este formato EXATAMENTE:
        
        [GANCHO - 10 segundos]
        Eliseu üë§: Fala, pessoal! Hoje eu vou mostrar pra voc√™s...
        
        [INTRODU√á√ÉO - transi√ß√£o suave]
        Eliseu üë§: E por que isso √© t√£o importante? Olha s√≥...
        
        [DESENVOLVIMENTO - ponto 1]
        Eliseu üë§: Primeiro, vamos entender que...
        
        [INDICA√á√ÉO VISUAL - mostrar gr√°fico na tela]
        Eliseu üë§: Como voc√™s podem ver neste exemplo...
        
        [CONCLUS√ÉO - call to action]
        Eliseu üë§: Ent√£o, deixa nos coment√°rios o que voc√™s acharam...
        
        üö® REGRAS CR√çTICAS - FORMATO OBRIGAT√ìRIO:
        ‚ùå PROIBIDO texto corrido sem formata√ß√£o
        ‚ùå PROIBIDO par√°grafos longos sem quebras
        ‚ùå PROIBIDO omitir as marca√ß√µes [SE√á√ÉO]
        ‚ùå PROIBIDO omitir "Eliseu üë§:" antes de TODA fala
        ‚ùå PROIBIDO explica√ß√µes sobre o roteiro
        ‚ùå PROIBIDO coment√°rios finais ou resumos
        
        ‚úÖ OBRIGAT√ìRIO: Toda fala DEVE come√ßar com "Eliseu üë§:"
        ‚úÖ OBRIGAT√ìRIO: Toda se√ß√£o DEVE ter [T√çTULO DA SE√á√ÉO]
        ‚úÖ OBRIGAT√ìRIO: Indica√ß√µes t√©cnicas sempre [entre colchetes]
        ‚úÖ OBRIGAT√ìRIO: Quebrar o texto em blocos organizados
        ‚úÖ OBRIGAT√ìRIO: Terminar com √∫ltima fala do Eliseu
        
        üéØ LEMBRE-SE: Se o roteiro atual tem menos de {min_words} palavras, voc√™ DEVE expandi-lo completamente. N√ÉO aceite roteiros curtos!
        """
        
        response = self.llm.invoke([HumanMessage(content=prompt)])
        
        # Verifica se o resultado ainda est√° curto e tenta uma segunda vez
        new_spoken_text, new_word_count = script_utils.extract_spoken_words(response.content)
        
        if new_word_count < min_words:
            # Segunda tentativa com prompt ainda mais agressivo
            retry_prompt = f"""
            üö®üö® SEGUNDA TENTATIVA - ROTEIRO AINDA MUITO CURTO! üö®üö®
            
            Voc√™ retornou {new_word_count} palavras quando o m√≠nimo √© {min_words} palavras!
            
            ISSO √â INACEIT√ÅVEL! Voc√™ DEVE gerar pelo menos {min_words} palavras FALADAS.
            
            Pegue o roteiro abaixo e TRIPLIQUE o conte√∫do:
            {response.content}
            
            üö® FORMATO OBRIGAT√ìRIO - SIGA RIGOROSAMENTE:
            
            [GANCHO - 10 segundos]
            Eliseu üë§: [Fala de abertura aqui...]
            
            [INTRODU√á√ÉO - contexto]
            Eliseu üë§: [Explica√ß√£o do contexto...]
            
            [DESENVOLVIMENTO - pontos principais]
            Eliseu üë§: [Primeiro ponto expandido...]
            
            [INDICA√á√ÉO VISUAL - mostrar dados]
            Eliseu üë§: [Coment√°rio sobre o visual...]
            
            [CONCLUS√ÉO - call to action]
            Eliseu üë§: [Finaliza√ß√£o e CTA...]
            
            ESTRAT√âGIAS OBRIGAT√ìRIAS:
            - Para CADA ponto, adicione 3-5 frases de explica√ß√£o
            - Para CADA exemplo, adicione hist√≥rias e contexto
            - Adicione sub-t√≥picos em CADA se√ß√£o
            - Desenvolva MUITO mais a introdu√ß√£o e conclus√£o
            - Use o formato [SE√á√ÉO] e "Eliseu üë§:" OBRIGATORIAMENTE
            
            üö´ REGRAS CR√çTICAS:
            ‚ùå PROIBIDO texto corrido sem formata√ß√£o
            ‚ùå PROIBIDO omitir "Eliseu üë§:" antes de falas
            ‚ùå PROIBIDO omitir se√ß√µes [ENTRE COLCHETES]
            ‚ùå PROIBIDO coment√°rios finais sobre o roteiro
            
            ‚úÖ USE o formato especificado acima OBRIGATORIAMENTE
            ‚úÖ TERMINE com √∫ltima fala do Eliseu
            ‚úÖ PELO MENOS {min_words} PALAVRAS FALADAS!
            """
            
            retry_response = self.llm.invoke([HumanMessage(content=retry_prompt)])
            response = retry_response
        
        state["final_script"] = response.content
        state["messages"].append(response)
        return state
    
    def _format_videos(self, videos: List[Dict]) -> str:
        formatted = []
        for i, video in enumerate(videos[:5], 1):
            video_info = f"""
            {i}. {video['title']}
            - Views: {video['views']:,}
            - Likes: {video['likes']:,}
            - Canal: {video['channel']}
            - Engagement: {video.get('engagement_score', 0):.2f}%"""
            
            # Adiciona transcri√ß√£o se dispon√≠vel
            if video.get('has_transcript', False):
                transcript_preview = video.get('transcript_summary', '')[:300]
                video_info += f"""
            - ‚úÖ TRANSCRI√á√ÉO DISPON√çVEL
            - Pr√©via do conte√∫do: "{transcript_preview}..." """
            else:
                video_info += f"""
            - ‚ùå Sem transcri√ß√£o dispon√≠vel"""
                
            formatted.append(video_info)
        return '\n'.join(formatted)
    
    async def generate_script(self, videos: List[Dict], topic: str, target_minutes: int = 10, personality_prompt: str = None, model_provider: str = None) -> str:
        if not self.llm:
            provider_name = model_provider or self.model_provider
            return f"Error: {provider_name.upper()} API n√£o est√° dispon√≠vel. Por favor configure as chaves de API."
        
        initial_state = ScriptState(
            videos=videos,
            topic=topic,
            target_minutes=target_minutes,
            personality_prompt=personality_prompt or "",
            model_provider=model_provider or self.model_provider,
            trends=[],
            script_structure={},
            raw_script="",
            final_script="",
            messages=[]
        )
        
        result = await self.graph.ainvoke(initial_state)
        return result["final_script"]